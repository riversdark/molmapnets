# AUTOGENERATED! DO NOT EDIT! File to edit: 03_train.ipynb (unless otherwise specified).

__all__ = ['SingleFeatureData', 'DoubleFeatureData']

# Cell
import torch
from torch import nn, optim
import torch.nn.functional as F
torch.set_default_dtype(torch.float64)

from torch.utils.data import Dataset, DataLoader, random_split

# Cell
class SingleFeatureData(Dataset):
    """Process single feature map for model training.
    y: target
    X: feature map
    """
    def __init__(self, y, X, transform=None, target_transform=None):
        self.y = torch.from_numpy(y)
        self.X = torch.movedim(torch.from_numpy(X), -1, 1)
        self.transform = transform
        self.target_transform = target_transform

    def __len__(self):
        return self.y.shape[0]

    def __getitem__(self, idx):
        x = self.X[idx]
        t = self.y[idx]
        if self.transform:
            x = self.transform(x)
        if self.target_transform:
            t = self.target_transform(t)
        return x, t

# Cell
class DoubleFeatureData(Dataset):
    """Process single feature map for model training.
    y: target
    X: tuple of two feature maps
    """
    def __init__(self, y, X, transform=None, target_transform=None):
        X1, X2 = X
        self.y = torch.from_numpy(y)
        self.X1 = torch.movedim(torch.from_numpy(X1), -1, 1)
        self.X2 = torch.movedim(torch.from_numpy(X2), -1, 1)
        self.transform = transform
        self.target_transform = target_transform

    def __len__(self):
        return self.y.shape[0]

    def __getitem__(self, idx):
        x1 = self.X1[idx]
        x2 = self.X2[idx]
        t = self.y[idx]
        if self.transform:
            x1 = self.transform(x1)
            x2 = self.transform(x2)
        if self.target_transform:
            t = self.target_transform(t)
        return (x1, x2), t